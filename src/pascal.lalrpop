use crate::ast::*;
use crate::token::*;

grammar;

pub program: Program = {
    <s:@L> <ph:program_heading> semicolon <b:block> "." <e:@L> => Program {
        meta: meta(s, e),
        name: ph,
        block: b
    },
};

Comma<T>: Vec<T> = {                                                                               
   <v:T> <vs:("," <T>)*> => {
       let mut res = vec![v];
       for val in vs {
           res.push(val);
       }
       res
   }
}

#[inline]
Semi<T>: Vec<T> = {                                                                               
   <v:T> <vs:(";" <T>)*> => {
       let mut res = vec![v];
       for val in vs {
           res.push(val);
       }
       res
   }
}

Dotdot<T>: Vec<T> = {                                                                               
   <v:T> <vs:(".." <T>)*> => {
       let mut res = vec![v];
       for val in vs {
           res.push(val);
       }
       res
   }
}


program_heading: Identifier = {
    "program" <i:identifier> => i,
};

block: Block = {
    <s:@L> <lds:label_declaration_part> <cds:constant_definition_part> <tds:type_definition_part> <vds:variable_declaration_part> <pds:procedure_and_function_declaration_part> <ss:statement_part> <e:@L> => Block {
        meta: meta(s, e),
        label_decls: lds,
        constant_defs: cds,
        type_defs: tds,
        variable_decls: vds,
        proc_decls: pds,
        statements: ss
    },
};

label_declaration_part: Vec<usize> = {
    "label" <ll:Comma<label>> semicolon => ll,
    => vec![],
};

label: usize = {
    "integer" => <>,
};

constant_definition_part: Vec<ConstDef> = {
    "const" <cl:constant_definition*> => cl,
    => vec![],
};

constant_definition: ConstDef = {
    <s:@L> <i:identifier> "=" <ex:cexpression> semicolon <e:@L> => ConstDef {
        meta: meta(s, e),
        id: i,
        expr: ex
    },
};

cexpression: ConstExpression = {
    <s:@L> <ce:csimple_expression> <e:@L> => ConstExpression::Simple {
        meta: meta(s, e),
        value: ce
    },
    <s:@L> <lhs:csimple_expression> <op:relop> <rhs:csimple_expression> <e:@L> => ConstExpression::RelExpr {
        meta: meta(s, e),
        lhs: lhs,
        op: op,
        rhs: rhs
    },
};

csimple_expression: ConstSimpleExpression = {
    <s:@L> <t:cterm> <e:@L> => ConstSimpleExpression::Term {
        meta: meta(s, e),
        value: t
    },
    <s:@L> <lhs:csimple_expression> <op:addop> <rhs:cterm> <e:@L> => ConstSimpleExpression::AddExpr {
        meta: meta(s, e),
        lhs: Box::new(lhs),
        op: op,
        rhs: rhs
    },
};

cterm: ConstTerm = {
    <s:@L> <f:cfactor> <e:@L> => ConstTerm::Factor{
        meta: meta(s, e),
        value: f
    },
    <s:@L> <lhs:cterm> <op:mulop> <rhs:cfactor> <e:@L> => ConstTerm::MulExpr {
        meta: meta(s, e),
        lhs: Box::new(lhs),
        op: op,
        rhs: rhs
    },
};

cfactor: ConstFactor = {
    <s:@L> <si:sign> <f:cfactor> <e:@L> => ConstFactor::Factor {
        meta: meta(s, e),
        is_negative: si,
        expr: Box::new(f)
    },
    <s:@L> <ce:cexponentiation> <e:@L> => ConstFactor::Exponentiation {
        meta: meta(s, e),
        value: ce
    },
};

cexponentiation: ConstExponentiation = {
    <s:@L> <p:cprimary> <e:@L> => ConstExponentiation::Primary {
        meta: meta(s, e),
        value: p
    },
    <s:@L> <lhs:cprimary> "**" <rhs:cexponentiation> <e:@L> => ConstExponentiation::Exponent {
        meta: meta(s, e),
        base: lhs,
        pow: Box::new(rhs)
    },
};

cprimary: ConstPrimary = {
    <s:@L> <i:identifier> <e:@L> => ConstPrimary::Identifier {
        meta: meta(s, e),
        value: i
    },
    <s:@L> "(" <ex:cexpression> ")" <e:@L> => ConstPrimary::Paren {
        meta: meta(s, e),
        value: Box::new(ex)
    },
    <s:@L> <uc:unsigned_constant> <e:@L> => ConstPrimary::UnsignedConstant {
        meta: meta(s, e),
        value: uc
    },
    <s:@L> "not" <p:cprimary> <e:@L> => ConstPrimary::Not {
        meta: meta(s, e),
        value: Box::new(p)
    },
};

constant: Constant = {
    <s:@L> <ns:non_string> <e:@L> => Constant::NonString {
        meta: meta(s, e),
        value: ns
    },
    <s:@L> <si:sign> <c:non_string> <e:@L> => Constant::SignedConstant {
        meta: meta(s, e),
        is_negative: si,
        constant: Box::new(c)
    },
    <s:@L> <st:"string"> <e:@L> => Constant::String {
        meta: meta(s, e),
        value: st
    },
};

sign: bool = {
    "+" => false,
    "-" => true,
};

non_string: NonString = {
    <s:@L> <i:"integer"> <e:@L> => NonString::Integer {
        meta: meta(s, e),
        value: i
    },
    <s:@L> <i:identifier> <e:@L> => NonString::Identifier {
        meta: meta(s, e),
        value: i
    },
    <s:@L> <f:"float"> <e:@L> => NonString::Real {
        meta: meta(s, e),
        value: f
    },
};

type_definition_part: Vec<TypeDef> = {
    "type" <ts:type_definition*> => ts,
    => vec![],
};

type_definition: TypeDef = {
    <s:@L> <i:identifier> "=" <t:type_denoter> semicolon <e:@L> => TypeDef {
        meta: meta(s, e),
        id: i,
        typ: t
    },
};

type_denoter: Type = {
    <s:@L> <i:identifier> <e:@L> => Type::Identifier {
        meta: meta(s, e),
        value: i
    },
    <s:@L> <nt:new_type> <e:@L> => Type::NewType {
        meta: meta(s, e),
        value: Box::new(nt)
    },
};

new_type: NewType = {
    <s:@L> <nt:new_ordinal_type> <e:@L> => NewType::OrdinalType {
        meta: meta(s, e),
        value: nt
    },
    <s:@L> <st:structured_type> <e:@L> => NewType::StructuredType {
        meta: meta(s, e),
        value: Box::new(st)
    },
    new_pointer_type => <>,
};

new_ordinal_type: NewOrdinalType = {
    <s:@L> <et:enumerated_type> <e:@L> => NewOrdinalType::EnumeratedType {
        meta: meta(s, e),
        value: et
    },
    subrange_type => <>,
};

enumerated_type: Vec<Identifier> = {
    "(" <il:Comma<identifier>> ")" => il,
};

subrange_type: NewOrdinalType = {
    <s:@L> <l:constant> ".." <h:constant> <e:@L> => NewOrdinalType::SubrangeType {
        meta: meta(s, e),
        low: l,
        high: h
    },
};

structured_type: StructuredType = {
    array_type => <>,
    record_type => <>,
    set_type => <>,
    <s:@L> <ft:file_type> <e:@L> => StructuredType::File {
        meta: meta(s, e),
        value: Box::new(ft)
    },
};

array_type: StructuredType = {
    <s:@L> "array" "[" <il:Comma<index_type>> "]" "of" <t:component_type> <e:@L> => StructuredType::Array {
        meta: meta(s, e),
        index_list: il,
        typ: Box::new(t)
    },
};

index_type: OrdinalType = {
    ordinal_type => <>,
};

ordinal_type: OrdinalType = {
    <s:@L> <nt:new_ordinal_type> <e:@L> => OrdinalType::NewOrdinalType {
        meta: meta(s, e),
        value: nt
    },
    <s:@L> <i:identifier> <e:@L> => OrdinalType::Identifier {
        meta: meta(s, e),
        value: i
    },
};

component_type: Type = {
    type_denoter => <>,
};

record_type: StructuredType = {
    <s:@L> "record" <r:Semi<record_section>> "end" <e:@L> => StructuredType::Record {
        meta: meta(s, e),
        record_section: r,
        variant_section: None
    },
    <s:@L> "record" <r:Semi<record_section>> semicolon <v:variant_part> "end" <e:@L> => StructuredType::Record {
        meta: meta(s, e),
        record_section: r,
        variant_section: v
    },
    <s:@L> "record" <v:variant_part> "end" <e:@L> => StructuredType::Record {
        meta: meta(s, e),
        record_section: vec![],
        variant_section: v
    },
};

record_section: RecordSection = {
    <s:@L> <il:Comma<identifier>> ":" <t:type_denoter> <e:@L> => RecordSection {
        meta: meta(s, e),
        ids: il,
        typ: t
    },
};

variant_part: Option<RecordVariantPart> = {
   <s:@L> "case" <vs:variant_selector> "of" <l:Semi<variant>> semicolon <e:@L> => Some(RecordVariantPart {
        meta: meta(s, e),
        selector: vs,
        variants: l
    }),
    <s:@L> "case" <vs:variant_selector> "of" <l:Semi<variant>> <e:@L> => Some(RecordVariantPart {
        meta: meta(s, e),
        selector: vs,
        variants: l
    }),
    => None,
};

variant_selector: VariantSelector = {
    <s:@L> <f:tag_field> ":" <t:tag_type> <e:@L> => VariantSelector {
        meta: meta(s, e),
        field: Some(f),
        tag: t
    },
    <s:@L> <tt:tag_type> <e:@L> => VariantSelector {
        meta: meta(s, e),
        field: None,
        tag: tt
    },
};

variant: Variant = {
    <s:@L> <cc:Comma<case_constant>> ":" "(" <r:Semi<record_section>> ")" <e:@L> => Variant {
        meta: meta(s, e),
        case_consts: cc,
        record_section: r,
        variant_section: None
    },
    <s:@L> <cc:Comma<case_constant>> ":" "(" <r:Semi<record_section>> semicolon <v:variant_part> ")" <e:@L> => Variant {
        meta: meta(s, e),
        case_consts: cc,
        record_section: r,
        variant_section: v
    },
    <s:@L> <cc:Comma<case_constant>> ":" "(" <v:variant_part> ")" <e:@L> => Variant {
        meta: meta(s, e),
        case_consts: cc,
        record_section: vec![],
        variant_section: v
    }
};

case_constant: CaseConstant = {
    <s:@L> <c:constant> <e:@L> => CaseConstant {
        meta: meta(s, e),
        low: c,
        high: None
    },
    <s:@L> <l:constant> ".." <h:constant> <e:@L> => CaseConstant {
        meta: meta(s, e),
        low: l,
        high: Some(h)
    },
};

tag_field: Identifier = {
    identifier => <>,
};

tag_type: Identifier = {
    identifier => <>,
};

set_type: StructuredType = {
    <s:@L> "set" "of" <t:base_type> <e:@L> => StructuredType::Set {
        meta: meta(s, e),
        value: t
    },
};

base_type: OrdinalType = {
    ordinal_type => <>,
};

file_type: Type = {
    "pfile" "of" <t:component_type> => t,
};

new_pointer_type: NewType = {
    <s:@L> "^" <t:domain_type> <e:@L> => NewType::PointerType {
        meta: meta(s, e),
        value: t
    },
};

domain_type: Identifier = {
    identifier => <>,
};

variable_declaration_part: Vec<VariableDecl> = {
    "var" <l:Semi<variable_declaration>> semicolon => l,
    => vec![],
};

variable_declaration: VariableDecl = {
    <s:@L> <il:Comma<identifier>> ":" <t:type_denoter> <e:@L> => VariableDecl {
        meta: meta(s, e),
        ids: il,
        typ: t
    },
};

procedure_and_function_declaration_part: Vec<ProcedureOrFuncDecl> = {
    <l:Semi<proc_or_func_declaration>> semicolon => l,
    => vec![],
};

proc_or_func_declaration: ProcedureOrFuncDecl = {
    <s:@L> <pd:procedure_declaration> <e:@L> => ProcedureOrFuncDecl::Procedure {
        meta: meta(s, e),
        value: pd
    },
    <s:@L> <fd:function_declaration> <e:@L> => ProcedureOrFuncDecl::Function {
        meta: meta(s, e),
        value: fd
    },
};

procedure_declaration: ProcedureDecl = {
    <s:@L> <h:procedure_heading> semicolon <d:directive> <e:@L> => ProcedureDecl::Directive {
        meta: meta(s, e),
        head: h,
        is_forward: d
    },
    <s:@L> <h:procedure_heading> semicolon <b:procedure_block> <e:@L> => ProcedureDecl::Block {
        meta: meta(s, e),
        head: h,
        block: b
    },
};

procedure_heading: ProcedureHeading = {
    <s:@L> <pi:procedure_identification> <e:@L> => ProcedureHeading {
        meta: meta(s, e),
        name: pi,
        params: vec![]
    },
    <s:@L> <id:procedure_identification> <ps:formal_parameter_list> <e:@L> => ProcedureHeading {
        meta: meta(s, e),
        name: id,
        params: ps
    },
};

directive: bool = {
    "forward" => true,
    "external" => false,
};

formal_parameter_list: Vec<FormalParameter> = {
    "(" <ps:Semi<formal_parameter_section>> ")" => ps,
};

formal_parameter_section: FormalParameter = {
    value_parameter_specification => <>,
    variable_parameter_specification => <>,
    procedural_parameter_specification => <>,
    functional_parameter_specification => <>,
};

value_parameter_specification: FormalParameter = {
    <s:@L> <il:Comma<identifier>> ":" <i:identifier> <e:@L> => FormalParameter::Value {
        meta: meta(s, e),
        lhs: il,
        rhs: i
    },
};

variable_parameter_specification: FormalParameter = {
    <s:@L> "var" <il:Comma<identifier>> ":" <i:identifier> <e:@L> => FormalParameter::Variable {
        meta: meta(s, e),
        lhs: il,
        rhs: i
    },
};

procedural_parameter_specification: FormalParameter = {
    <s:@L> <ph:procedure_heading> <e:@L> => FormalParameter::Procedure {
        meta: meta(s, e),
        value: ph
    },
};

functional_parameter_specification: FormalParameter = {
    <s:@L> <fh:function_heading> <e:@L> => FormalParameter::Function {
        meta: meta(s, e),
        value: fh
    },
};

procedure_identification: Identifier = {
    "procedure" <i:identifier> => i,
};

procedure_block: Block = {
    block => <>,
};

function_declaration: FunctionDecl = {
    <s:@L> <h:function_heading> semicolon <d:directive> <e:@L> => FunctionDecl::Directive {
        meta: meta(s, e),
        head: h,
        is_forward: d
    },
    <s:@L> <i:function_identification> semicolon <b:function_block> <e:@L> => FunctionDecl::Identification {
        meta: meta(s, e),
        name: i,
        block: b
    },
    <s:@L> <h:function_heading> semicolon <b:function_block> <e:@L> => FunctionDecl::Block {
        meta: meta(s, e),
        head: h,
        block: b
    },
};

function_heading: FunctionHeading = {
    <s:@L> "function" <i:identifier> ":" <r:result_type> <e:@L> => FunctionHeading {
        meta: meta(s, e),
        name: i,
        params: vec![],
        result: r
    },
    <s:@L> "function" <i:identifier> <ps:formal_parameter_list> ":" <r:result_type> <e:@L> => FunctionHeading {
        meta: meta(s, e),
        name: i,
        params: ps,
        result: r
    },
};

result_type: Identifier = {
    identifier,
};

function_identification: Identifier = {
    "function" <i:identifier> => i,
};

function_block: Block = {
    block => <>,
};

statement_part: Vec<Statement> = {
    compound_statement => <>,
};

compound_statement: Vec<Statement> = {
    "begin" <s:Semi<statement>> "end" => s,
};

statement: Statement = {
    open_statement => <>,
    closed_statement => <>,
};

open_statement: Statement = {
    <s:@L> <l:label> ":" <st:non_labeled_open_statement> <e:@L> => Statement::Open {
        meta: meta(s, e),
        label: Some(l),
        s: st
    },
    <s:@L> <nlos:non_labeled_open_statement> <e:@L> => Statement::Open {
        meta: meta(s, e),
        label: None,
        s: nlos
    },
};

closed_statement: Statement = {
    <s:@L> <l:label> ":" <st:non_labeled_closed_statement> <e:@L> => Statement::Closed {
        meta: meta(s, e),
        label: Some(l),
        s: st
    },
    <s:@L> <nlos:non_labeled_closed_statement> <e:@L> => Statement::Closed {
        meta: meta(s, e),
        label: None,
        s: nlos
    },
};

non_labeled_closed_statement: ClosedStatement = {
    <s:@L> <a:assignment_statement> <e:@L> => ClosedStatement::Assignment {
        meta: meta(s, e),
        value: a
    },
    procedure_statement => <>,
    <s:@L> <gs:goto_statement> <e:@L> => ClosedStatement::Goto {
        meta: meta(s, e),
        value: gs
    },
    <s:@L> <cs:compound_statement> <e:@L> => ClosedStatement::Compound {
        meta: meta(s, e),
        value: cs
    },
    case_statement => <>,
    repeat_statement => <>,
    closed_with_statement => <>,
    closed_if_statement => <>,
    closed_while_statement => <>,
    closed_for_statement => <>,
    <s:@L> <e:@L> => ClosedStatement::Empty {
        meta: meta(s, e),
    },
};

non_labeled_open_statement: OpenStatement = {
    open_with_statement => <>,
    <s:@L> <ois:open_if_statement> <e:@L> => OpenStatement::If {
        meta: meta(s, e),
        value: ois
    },
    open_while_statement => <>,
    open_for_statement => <>,
};

repeat_statement: ClosedStatement = {
    <s:@L> "repeat" <st:Semi<statement>> "until" <ex:boolean_expression> <e:@L> => ClosedStatement::Repeat {
        meta: meta(s, e),
        s: st,
        until: ex
    },
};

open_while_statement: OpenStatement = {
    <s:@L> "while" <ex:boolean_expression> "do" <st:open_statement> <e:@L> => OpenStatement::While {
        meta: meta(s, e),
        predicate: ex,
        s: Box::new(st)
    },
};

closed_while_statement: ClosedStatement = {
    <s:@L> "while" <ex:boolean_expression> "do" <st:closed_statement> <e:@L> => ClosedStatement::While {
        meta: meta(s, e),
        predicate: ex,
        s: Box::new(st)
    },
};

open_for_statement: OpenStatement = {
    <s:@L> "for" <v:control_variable> ":=" <init:initial_value> <d:direction> <f:final_value> "do" <st:open_statement> <e:@L> => OpenStatement::For {
        meta: meta(s, e),
        var: v,
        init: init,
        inc: d,
        fin: f,
        s: Box::new(st)
    },
};

closed_for_statement: ClosedStatement = {
    <s:@L> "for" <v:control_variable> ":=" <init:initial_value> <d:direction> <f:final_value> "do" <st:closed_statement> <e:@L> => ClosedStatement::For {
        meta: meta(s, e),
        var: v,
        init: init,
        inc: d,
        fin: f,
        s: Box::new(st)
    },
};

open_with_statement: OpenStatement = {
    <s:@L> "with" <l:Comma<variable_access>> "do" <st:open_statement> <e:@L> => OpenStatement::With {
        meta: meta(s, e),
        vars: l,
        s: Box::new(st)
    },
};

closed_with_statement: ClosedStatement = {
    <s:@L> "with" <l:Comma<variable_access>> "do" <st:closed_statement> <e:@L> => ClosedStatement::With {
        meta: meta(s, e),
        vars: l,
        s: Box::new(st)
    },
};

open_if_statement: OpenIf = {
    <s:@L> "if" <ex:boolean_expression> "then" <st:statement> <e:@L> => OpenIf::WithoutElse {
        meta: meta(s, e),
        predicate: ex,
        then: Box::new(st)
    },
    <s:@L> "if" <ex:boolean_expression> "then" <then:closed_statement> "else" <els:open_statement> <e:@L> => OpenIf::WithElse {
        meta: meta(s, e),
        predicate: ex,
        then: Box::new(then),
        els: Box::new(els)
    },
};

closed_if_statement: ClosedStatement = {
    <s:@L> "if" <ex:boolean_expression> "then" <then:closed_statement> "else" <els:closed_statement> <e:@L> => ClosedStatement::If {
        meta: meta(s, e),
        predicate: ex,
        then: Box::new(then),
        els: Box::new(els)
    },
};

assignment_statement: Assignment = {
    <s:@L> <v:variable_access> ":=" <ex:expression> <e:@L> => Assignment {
        meta: meta(s, e),
        var: v,
        rhs: ex
    },
};

variable_access: VariableAccess = {
    <s:@L> <i:identifier> <e:@L> => VariableAccess::Identifier {
        meta: meta(s, e),
        value: i
    },
    indexed_variable => <>,
    field_designator => <>,
    <s:@L> <v:variable_access> "^" <e:@L> => VariableAccess::Deref {
        meta: meta(s, e),
        value: Box::new(v)
    },
};

indexed_variable: VariableAccess = {
    <s:@L> <v:variable_access> "[" <idx:index_expression> "]" <e:@L> => VariableAccess::Indexed {
        meta: meta(s, e),
        var: Box::new(v),
        index: Box::new(idx),
    },
};

index_expression: Expression = {
    expression => <>,
};

field_designator: VariableAccess = {
    <s:@L> <v:variable_access> "." <i:identifier> <e:@L> => VariableAccess::Field {
        meta: meta(s, e),
        lhs: Box::new(v),
        rhs: i
    },
};

procedure_statement: ClosedStatement = {
    <s:@L> <i:identifier> <p:params> <e:@L> => ClosedStatement::Procedure {
        meta: meta(s, e),
        id: i,
        params: p
    },
    <s:@L> <i:identifier> <e:@L> => ClosedStatement::Procedure {
        meta: meta(s, e),
        id: i,
        params: vec![]
    },
};

params: Vec<Parameter> = {
    "(" <ps:Comma<actual_parameter>> ")" => ps,
};

actual_parameter: Parameter = {
    expression => <>,
};

goto_statement: usize = {
    "goto" <l:label> => l,
};

case_statement: ClosedStatement = {
    <s:@L> "case" <i:case_index> "of" <l:Semi<case_list_element>> "end" <e:@L> => ClosedStatement::Case {
        meta: meta(s, e),
        index: i,
        cases: l,
        otherwise: None
    },
    <s:@L> "case" <i:case_index> "of" <l:Semi<case_list_element>> ";" "end" <e:@L> => ClosedStatement::Case {
        meta: meta(s, e),
        index: i,
        cases: l,
        otherwise: None
    },
    <s:@L> "case" <i:case_index> "of" <l:Semi<case_list_element>> semicolon otherwisepart <o:statement> "end" <e:@L> => ClosedStatement::Case {
        meta: meta(s, e),
        index: i,
        cases: l,
        otherwise: Some(Box::new(o))
    },
    <s:@L> "case" <i:case_index> "of" <l:Semi<case_list_element>> semicolon otherwisepart <o:statement> ";" "end" <e:@L> => ClosedStatement::Case {
        meta: meta(s, e),
        index: i,
        cases: l,
        otherwise: Some(Box::new(o))
    },
};

case_index: Expression = {
    expression,
};

case_list_element: CaseElement = {
    <s:@L> <l:Comma<case_constant>> ":" <st:statement> <e:@L> => CaseElement {
        meta: meta(s, e),
        cases: l,
        s: st
    },
};

otherwisepart: () = {
    "otherwise",
    "otherwise" ":",
};

control_variable: Identifier = {
    identifier,
};

initial_value: Expression = {
    expression,
};

direction: bool = {
    "to" => true,
    "downto" => false,
};

final_value: Expression = {
    expression,
};

boolean_expression: Expression = {
    expression,
};

expression: Expression = {
    <s:@L> <se:simple_expression> <e:@L> => Expression::Simple {
        meta: meta(s, e),
        value: se
    },
    <s:@L> <l:simple_expression> <op:relop> <r:simple_expression> <e:@L> => Expression::RelExpr {
        meta: meta(s, e),
        lhs: Box::new(l),
        op: op,
        rhs: Box::new(r)
    },
};

simple_expression: SimpleExpression = {
    <s:@L> <t:term> <e:@L> => SimpleExpression::Term {
        meta: meta(s, e),
        value: t
    },
    <s:@L> <l:simple_expression> <op:addop> <r:term> <e:@L> => SimpleExpression::AddExpr {
        meta: meta(s, e),
        lhs: Box::new(l),
        op: op,
        rhs: r
    },
};

term: Term = {
    <s:@L> <f:factor> <e:@L> => Term::Factor {
        meta: meta(s, e),
        value: f
    },
    <s:@L> <l:term> <op:mulop> <r:factor> <e:@L> => Term::MulExpr {
        meta: meta(s, e),
        lhs: Box::new(l),
        op: op,
        rhs: r
    },
};

factor: Factor = {
    <s:@L> <si:sign> <f:factor> <e:@L> => Factor::Factor {
        meta: meta(s, e),
        is_negative: si,
        expr: Box::new(f)
    },
    <s:@L> <ex:exponentiation> <e:@L> => Factor::Exponentiation {
        meta: meta(s, e),
        value: ex
    },
};

exponentiation: Exponentiation = {
    <s:@L> <p:primary> <e:@L> => Exponentiation::Primary {
        meta: meta(s, e),
        value: p
    },
    <s:@L> <p:primary> "**" <ex:exponentiation> <e:@L> => Exponentiation::Exponent {
        meta: meta(s, e),
        base: p,
        pow: Box::new(ex)
    },
};

primary: Primary = {
    <s:@L> <va:variable_access> <e:@L> => Primary::VariableAccess {
        meta: meta(s, e),
        value: va
    },
    <s:@L> <uc:unsigned_constant> <e:@L> => Primary::UnsignedConstant {
        meta: meta(s, e),
        value: uc
    },
    function_designator => <>,
    <s:@L> <sc:set_constructor> <e:@L> => Primary::Set {
        meta: meta(s, e),
        value: sc
    },
    <s:@L> "(" <ex:expression> ")" <e:@L> => Primary::Paren {
        meta: meta(s, e),
        value: Box::new(ex)
    },
    <s:@L> "not" <p:primary> <e:@L> => Primary::Not {
        meta: meta(s, e),
        value: Box::new(p)
    },
};

unsigned_constant: UnsignedConstant = {
    <s:@L> <un:unsigned_number> <e:@L> => UnsignedConstant::Number {
        meta: meta(s, e),
        value: un
    },
    <s:@L> <st:"string"> <e:@L> => UnsignedConstant::String {
        meta: meta(s, e),
        value: st
    },
    <s:@L> "nil" <e:@L> => UnsignedConstant::Nil {
        meta: meta(s, e),
    },
};

unsigned_number: Number = {
    <s:@L> <ui:unsigned_integer> <e:@L> => Number::Integer {
        meta: meta(s, e),
        value: ui
    },
    <s:@L> <ur:unsigned_real> <e:@R> => Number::Real {
        meta: meta(s, e),
        value: ur
    },
};

unsigned_integer: usize = {
    "integer" => <>,
};

unsigned_real: f32 = {
    "float" => <>,
};

function_designator: Primary = {
    <s:@L> <i:identifier> <p:params> <e:@L> => Primary::FunctionCall {
        meta: meta(s, e),
        name: i,
        params: p
    },
};

set_constructor: Vec<Vec<Expression>> = {
    "[" <l:Comma<Dotdot<expression>>> "]" => l,
};

addop: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
    "or" => AddOp::Or,
};

mulop: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::FDiv,
    "div" => MulOp::IDiv,
    "mod" => MulOp::Mod,
    "and" => MulOp::And,
};

relop: RelOp = {
    "=" => RelOp::Equal,
    "<>" => RelOp::NotEqual,
    "<" => RelOp::Less,
    ">" => RelOp::Greater,
    "<=" => RelOp::LessEqual,
    ">=" => RelOp::GreaterEqual,
    "in" => RelOp::In,
};

identifier: Identifier = {
    "identifier" => <>,
};

semicolon: () = {
    ";",
};

comma: () = {
    ",",
};

extern {
    type Location = (usize, usize);
    type Error = Error;
    enum Token {
        "." => Token::Period,
        "," => Token::Comma,
        ";" => Token::Semicolon,
        ".." => Token::Dotdot,
        "program" => Token::Program,
        "label" => Token::Label,
        "const" => Token::Const,
        "=" => Token::Equals,
        "**" => Token::Pow,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "not" => Token::Not,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "type" => Token::Type,
        "array" => Token::Array,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "of" => Token::Of,
        "record" => Token::Record,
        "begin" => Token::Begin,
        "end" => Token::End,
        ":" => Token::Colon,
        "case" => Token::Case,
        "set" => Token::Set,
        "pfile" => Token::PFile,
        "^" => Token::Pointer,
        "var" => Token::Var,
        "forward" => Token::Forward,
        "external" => Token::External,
        "procedure" => Token::Procedure,
        "function" => Token::Function,
        "repeat" => Token::Repeat,
        "until" => Token::Until,
        "while" => Token::While,
        "do" => Token::Do,
        "for" => Token::For,
        ":=" => Token::Assign,
        "with" => Token::With,
        "if" => Token::If,
        "then" => Token::Then,
        "else" => Token::Else,
        "goto" => Token::Goto,
        "otherwise" => Token::Otherwise,
        "to" => Token::To,
        "downto" => Token::Downto,
        "nil" => Token::Nil,
        "or" => Token::Or,
        "*" => Token::Mul,
        "/" => Token::FDiv,
        "div" => Token::IDiv,
        "mod" => Token::Mod,
        "and" => Token::And,
        "<>" => Token::NotEquals,
        "<" => Token::Less,
        ">" => Token::Greater,
        "<=" => Token::LessEquals,
        ">=" => Token::GreaterEquals,
        "in" => Token::In,
        "identifier" => Token::Identifier(<String>),
        "float" => Token::Float(<f32>),
        "string" => Token::String(<String>),
        "integer" => Token::Integer(<usize>),
    }
}
